server:
  port: 8080

spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

security:
  oauth2:
    client:
      clientId: my-client-id
      clientSecret: secret
      authorizedGrantTypes: password, authorization_code, refresh_token, implicit
      scopes: read, write
    resource:
      user-info-uri: https://api.example.com/userinfo

uaa:
  oauth:
    clients:
      - id: web-app
        secret: web-app-secret
        authorizedGrantTypes: password, authorization_code, refresh_token, client_credentials
        accessTokenValiditySeconds: 3600 # 1 hour
        refreshTokenValiditySeconds: 2592000 # 30 days
        authorities: ROLE_USER, ROLE_ADMIN
        scopes: openid, profile, email, resource.read, resource.write

  resources:
    # You can define resources that are protected by this UAA instance
    id: uaa-resource-id
    jwt:
      keyValue: |
        -----BEGIN RSA PUBLIC KEY-----
        MIIBIjANB...
        -----END RSA PUBLIC KEY-----

  users:
    - username: user
      password: password
      roles: ROLE_USER
    - username: admin
      password: admin
      roles: ROLE_ADMIN, ROLE_USER

  approvals:
    - userId: admin
      clientId: web-app
      scope: resource.read
      status: APPROVED
      expiresAt: 2023-12-31T23:59:59.999Z

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
